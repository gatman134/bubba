# Program By Daniel batista
# Made for the Adafruit_ADS1x15
# Fan controller for maintaining thermistor temperature

import time
from datetime import datetime
import Adafruit_ADS1x15
import subprocess
import os
import sys
import errno
import threading

trl=threading.RLock()
GAIN=1
adc=Adafruit_ADS1x15.ADS1115()

def setGCmd(command):
    global table_cmd
    with trl:
        table_cmd=command
     return
def getGCmd():
    global table_cmd
    with trl:
        return table_cmd
def setGHTmp(htemp):
    global table_htmp
    with trl:
        table_htmp=htemp
     return
def getGHTmp():
    global table_htmp
    with trl:
        return table_htemp
def setGLTmp(htemp):
    global table_ltmp
    with trl:
        table_ltmp=ltemp
     return
def getGLTmp():
    global table_ltmp
    with trl:
        return table_ltemp
def setGVoltage(voltage):
    global table_voltage
    with trl:
        table_voltage=voltage
     return
def getGVoltage():
    global table_voltage
    with trl:
        return table_voltage

def networkt():
   clientsocket = socket(AF_INET, SOCK_STREAM)
   try:
      clientsocket.connect(('localhost', 4000))
   except socket:
      print("Error: socket.error")
      os._exit(0)
   except: 
      print("Error: general connection error")
      os._exit(0)
   print("connected! To quit remote, press CTRL-C")

   msg = "NODE: "+str(0);
   #clientsocket.send(message.encode('ascii'))
   error = snd(clientsocket,msg)
   if(error):
      clientsocket.close()
      return

print("To exit the program please use CTRL+C")

def rcv(clientsocket):
 msg=""
 error=False
 try:
 recPkt = clientsocket.recv(1024)
 msg = recPkt.decode('ascii')
 #except socket.error as msg:
 # print "Socket Error: %s" % msg
 except TypeError as msg:
 logit(getTs()+" Connection "+outit(clientaddress, "")+" -- Error: TypeError non-integer")
 error=False
 except:
 logit(getTs()+" Connection "+outit(clientaddress, "")+" -- Error: socket receive, dropping connection")
 error=True
 return (error, str(msg))
#------------server receive from client
def snd(msg2send, clientsocket):
 error=False
 msg=""
 try:
 clientsocket.send(msg2send.encode('ascii'))
 #except socket.error, msg:
 except socket, msg:
 logit(getTs()+" Connection "+outit(clientaddress, "")+" -- Error: socket send, dropping connection")
 error=True
 except:
 logit(getTs()+" Connection "+outit(clientaddress, "")+" -- Error: general send, dropping connection")
 error=True
 return (error)
  if __name__ == "__main__":
 print("starting..")
 empty1=""
 empty2=""
 setGisReady(False)
 networkt=threading.Thread(target = netThread, args = (empty1, empty2))
 try:
 networkt.start()
 gpioMainClient()
 except KeyboardInterrupt:
 os._exit(0)
 
  if __name__ == "__main__":
 print("starting..")
 empty1=""
 empty2=""
 setGisReady(False)
 networkt=threading.Thread(target = netThread, args = (empty1, empty2))
 try:
 networkt.start()
 gpioMainClient()
 except KeyboardInterrupt:
 os._exit(0)